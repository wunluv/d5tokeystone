<?php
// $Id: simplefeed_item.module,v 1.51 2007/11/16 17:48:37 m3avrck Exp $

/**
 * @file
 * A node feed item.
 */


/**
 * Implementation of hook_init().
 */
function simplefeed_item_init() {
  // ensure we are not serving a cached page
  if (function_exists('drupal_set_content')) {
    // we don't do this in hook_menu to ensure the files are already included when
    // views_menu is executed
    if (module_exists('views')) {
      include_once('./'. drupal_get_path('module', 'simplefeed') .'/simplefeed_item_views.inc');
    }
  }
}


/**
 * Implementation of hook_perm().
 */
function simplefeed_item_perm() {
  return array('create feed items', 'edit own feed items', 'edit feed items');
}


/**
 * Implementation of hook_access().
 */
function simplefeed_item_access($op, $node) {
  global $user;

  switch ($op) {
    case 'create':
      return user_access('create feed items');
      break;

    case 'update':
    case 'delete':
      // users who create a feed may edit or delete it later, assuming they have the necessary permissions
      if ((user_access('edit own feed items') && ($user->uid == $node->uid)) || user_access('edit feed items')) {
        return TRUE;
      }
      break;
  }
}


/**
 * Implementation of hook_node_info().
 */
function simplefeed_item_node_info() {
  return array(
    'feed_item' => array(
      'name' => t('Feed Item'),
      'module' => 'simplefeed_item',
      'description' => t('An item that is part of a parent feed.')
    )
  );
}


/**
 * Implementation of hook_form().
 */
function simplefeed_item_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows' => 3,
  );
  $form['body_filter']['format'] = filter_form($node->format);

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('The URL for this feed item.'),
    '#maxlength' => 255,
    '#default_value' => isset($node->url) ? $node->url : 'http://www.',
    '#required' => TRUE
  );

  $form['feed_item_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Feed item settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // note all feed items are linked to their parent feed through the feed's nid
  // this allows the main feed to be revisioned (e.g., change title, description, etc.)
  // but still keep the same list of feed items
  // we select from the node table to get the latest revision's data
  $feeds = array();
  $result = db_query("SELECT title, nid FROM {node} WHERE type = 'feed'");
  while ($feed = db_fetch_object($result)) {
    $feeds[$feed->nid] = $feed->title;
  }

  // can't add a feed item if no feeds exist
  if (count($feeds) < 1) {
    drupal_set_message(t('No feeds found. You must first <a href="!create_feed">create a feed</a> before adding feed items.', array('!create_feed' => url('node/add/feed'))), 'error');
  }

  $form['feed_item_settings']['iid'] = array('#type' => 'value', '#value' => $node->iid);

  $form['feed_item_settings']['fid'] = array(
    '#type' => 'select',
    '#title' => t('Select parent feed'),
    '#description' => t('Select the parent feed for this feed item.'),
    '#options' => $feeds,
    '#default_value' => $node->fid,
  );

  if (user_access('administer feeds')) {
    $period = array(0 => t('Never')) + drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');
    $form['feed_item_settings']['expires'] = array(
      '#type' => 'select',
      '#title' => t('Discard item older than'),
      '#default_value' => isset($node->expires) ? $node->expires : variable_get('simplefeed_expires', 86400),
      '#options' => $period,
      '#description' => t('This feed item will be automatically discarded. Requires !cron to be running.', array('!cron' => l('cron', 'admin/logs/status')))
    );
  }
  else {
    $form['feed_item_settings']['expires'] = array('#type' => 'value', '#value' => variable_get('simplefeed_expires', 86400));
  }

  return $form;
}


/**
 * Implementation of hook_validate().
 *
 * @todo - currently there is no check for duplicate feed items if entered manually
 *         we would need to have SimplePie library generate a hash for this feed item
 */
function simplefeed_item_validate($node) {
  $valid_url = "`(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?`";
  $url = trim($node->url);

  if (!preg_match($valid_url, $url)) {
    form_set_error('url', t('The URL entered is not valid. It should be in the format of: <em>http://www.example.com/link/to/feed/item.html</em>'));
  }

  if (!$node->fid) {
    form_set_error('fid', t('You must select a valid parent feed.'));
  }
}


/**
 * Implementation of hook_load().
 */
function simplefeed_item_load($node) {
  $additions = db_fetch_object(db_query('SELECT iid, fid, expires, url FROM {simplefeed_feed_item} WHERE vid = %d', $node->vid));
  return $additions;
}


/**
 * Implementation of hook_insert().
 *
 * @todo - currently feed items that are manually created have blank iid -- need a way to invoke SimplePie to generate an iid for duplicate checking
 */
function simplefeed_item_insert($node) {
  db_query("INSERT INTO {simplefeed_feed_item} (vid, nid, iid, fid, expires, url) VALUES (%d, %d, '%s', %d, %d, '%s')", $node->vid, $node->nid, $node->iid, $node->fid, $node->expires, $node->url);
}


/**
 * Implementation of hook_update().
 */
function simplefeed_item_update($node) {
  // if this is a new node or we're adding a new revision
  if ($node->revision) {
    simplefeed_item_insert($node);
  }
  else {
    db_query("UPDATE {simplefeed_feed_item} SET fid = %d, expires = %d, url = '%s' WHERE vid = %d", $node->fid, $node->expires, $node->url, $node->vid);
  }
}


/**
 * Implementation of hook_delete().
 */
function simplefeed_item_delete($node) {
  db_query('DELETE FROM {simplefeed_feed_item} WHERE nid = %d', $node->nid);
}


/**
 * Implementation of hook_nodeapi().
 */
function simplefeed_item_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type == 'feed_item') {
    switch ($op) {
      case 'delete revision':
        db_query('DELETE FROM {simplefeed_feed_item} WHERE vid = %d', $node->vid);
        break;
      case 'submit':
        // Have to set the date and author here, because non-node administrators aren't able to
        // change it in node_submit() so feeds added in anon cron jobs will show up as now.
        $node->created = $node->date ? strtotime($node->date) : NULL;
        $account = user_load(array('name' => $node->name));
        $node->uid = $account->uid;
        break;
    }
  }
}


/**
 * Implementation of hook_view().
 */
function simplefeed_item_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);

  $node->content['simplefeed_item']['#theme'] = 'simplefeed_item_node_view';
  $node->content['simplefeed_item']['#weight'] = 2;
  $node->content['simplefeed_item']['url'] = array(
    '#value' => check_url($node->url),
    '#weight' => 1,
  );

  // since only administrators can edit when a feed item expires, only admins can see what this value is
  if (user_access('administer feeds')) {
    $node->content['simplefeed_item']['expires'] = array(
      '#value' => format_interval($node->expires),
      '#weight' => 2,
    );
  }

  return $node;
}


/**
 * Theme the display of a feed node.
 */
function theme_simplefeed_item_node_view($values) {
  // needs to be a space so default values aren't outputed
  $output = ' ';

  // since only administrators can edit when a feed item expires, only admins can see what this value is
  if (user_access('administer feeds')) {
    drupal_add_css(drupal_get_path('module', 'simplefeed') .'/simplefeed.css');

    $output = '<ul class="simplefeed-item">';
    $output .= '<li><strong>Expires:</strong> '. $values['expires']['#value'] .'</li>';
    $output .= '</ul>';
  }

  return $output;
}


/**
 * Implementation of hook_link().
 */
function simplefeed_item_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();           
  static $feeds = array();

  if ($type == 'node' && $node->type == 'feed_item' && isset($node->fid)) {
    // since generally you'll see the same feed items in a row for the same feed
    // we static cache this query so it doesn't repeat 10x or more per page
    if (!isset($feeds[$node->fid])) {
      $feed = db_result(db_query('SELECT title FROM {node} WHERE nid = %d', $node->fid));   
      $feeds[$node->fid] = $feed;
    }
    else {
      $feed = $feeds[$node->fid];
    }
    $links['simplefeed_item_parent'] = array(
      'title' => $feed,
      'href' => 'node/'. $node->fid,
      'attributes' => array('title' => t('Goto the feed source for this content'))
    );
    $links['simplefeed_item_url'] = array(
      'title' => t('Source'),       
      // note we don't need to check_url() since we do this in hook_view() on line 244
      // we decode_entities() to prevent double encoding since this url was already checked above
      // that way if a user outputs this at the theme layer the url is still safe
      'href' => decode_entities($node->url),
      'absolute' => TRUE,
      'attributes' => array('title' => t('Goto the source of this post'))
    );
  }

  return $links;
}


/**
 * Delete any feed items that have expired.
 */
function simplefeed_item_feed_expire() {
  // delete all expired feed items, ignore $vid since we expire *every* feed item in one call, not specific ones
  // note if a feed item has multiple revisions, any revision's expiration can trigger deletion of the entire node
  $items = db_query('SELECT DISTINCT n.nid FROM {simplefeed_feed_item} s JOIN {node_revisions} n ON s.vid = n.vid WHERE s.expires <> 0 AND s.expires <= (%d - n.timestamp)', time());

  while ($item = db_fetch_object($items)) {
    node_delete($item->nid);
  }             
  
  // if we actually deleted something
  if ($items != '') {
    // since we can end up deleting a lot of feed items quite often, we optimize this table to save space
    global $db_type;              
    if ($db_type == 'mysql' || $db_type == 'mysqli') {      
      db_query('OPTIMIZE TABLE {simplefeed_feed_item}'); 
    }
  }
}


/**
 * Turn each feed item into a node.
 *
 * @param $process_feed
 *   Feed node object
 * @param $cache_path
 *   Where to cache this feed on the file system
 */
function simplefeed_item_feed_parse($process_feed, $cache_path) {
  // simplepie processing, fetch feeds
  include_once './'. drupal_get_path('module', 'simplefeed') .'/simplepie.inc';
  $feed = new SimplePie();

  /*
  You tell SimplePie what feed you want to get and where to cache it at.
  SimplePie looks to see if the feed is already cached:
    If the cache is fresh use that.
    If there is no cached copy at all, SimplePie will grab and cache the feed.
    If the cache is there but it's old (SimplePie defaults to 60 minutes; configurable with set_cache_duration()), then SimplePie will ask the feed if it has changed since the last time we grabbed it (this is the HTTPCG part).
      If it hasn't changed, we reset the timer on the cache's freshness and keep it for another 60 minutes before checking again.
      If the cache has changed, SimplePie dumps the existing cache (since the cache is just a copy of the feed), and grabs a new copy of the feed and uses it.

    This cache uses a combination of LAST-MODIFIED and ETAG headers, and other intelligent methods to only grab changed feeds.
  */

	$feed->set_cache_location($_SERVER['DOCUMENT_ROOT'] . base_path() . $cache_path);
  $feed->set_feed_url($process_feed->url);
  $feed->set_timeout(15);
  // prevent SimplePie from using all of it's data santization since we use Drupal's input formats to handle this
  $feed->set_stupidly_fast(TRUE);
  $success = $feed->init();

  if ($success && $feed->data) {
    // loop through all of the items in the feed, faster than foreach
    $max = $feed->get_item_quantity();

    for ($i = 0; $i < $max; $i++) {
      $item = $feed->get_item($i);
      // unique SHA-1 hash for a feed item
      $iid = $item->get_id(true);

      // make sure we don't already have this feed item
      $duplicate = db_result(db_query("SELECT iid FROM {simplefeed_feed_item} WHERE iid = '%s'", $iid));

      if ($duplicate == '') {
        // add in tags if a vocabulary is set
        if (variable_get('simplefeed_vocab', 0)) {
          // add in tags from parent feed
          $tags = $process_feed->tags;
          // add in any tags that are found in the feed item itself from the originating site
          if (variable_get('simplefeed_categories', 0)) {
            if (count($item->get_categories()) > 0) {
              foreach ($item->get_categories() as $category) {
                $tags .= ', '. $category->get_label();
              }
            }
          }

          // add any tags (either inheriting from parent feed or from parsing the feed item) to the feed item node
          if ($tags != '') {
            $item->taxonomy['tags'][$process_feed->vocab] = decode_entities($tags);
          }
        }

        $link = $item->get_permalink();
        // this is node created date format for Drupal
        $date = $item->get_date('Y-m-d H:i:s O');
        $body = $item->get_content();
        // this strips out any tags that may appear as <b> in the title, and makes sure &quot; -> " for display
        $title = strip_tags(decode_entities($item->get_title()));

        // some feeds don't provide titles so we construct one with the first 72 characters of the body
        if (!$title) {
          // remove any HTML or line breaks so these don't appear in the title
          $title = trim(str_replace(array("\n", "\r"), ' ', strip_tags($body)));
          $title = trim(substr($title, 0, 72));
          $lastchar = substr($title, -1, 1);
          // check to see if the last character in the title is a non-alphanumeric character, except for ? or !
          // if it is strip it off so you don't get strange looking titles
          if (preg_match('/[^0-9A-Za-z\!\?]/', $lastchar)) {
            $title = substr($title, 0, -1);
          }
          // ? and ! are ok to end a title with since they make sense
          if ($lastchar != '!' and $lastchar != '?') {
            $title .= '...';
          }
        }

        // create a feed item node
        $node = array('type' => 'feed_item', 'iid' => $iid);
        $values['title'] = $title;
        if ($date) {
          // "created" is a node property, however we have to use "date" to set this with drupal_execute since it is the form element name
          $values['date'] = $date;
        }
        $values['name'] = db_result(db_query('SELECT u.name FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE nid = %d', $process_feed->nid));
        $values['format'] = variable_get('simplefeed_format', 1);
        // $item->get_description()  for teaser?
        $values['body'] = $body;
        $values['expires'] = $process_feed->expires;
        $values['url'] = $link != '' ? $link : $feed->get_permalink();
        $values['fid'] = $process_feed->nid;
        $values['taxonomy'] = $item->taxonomy;

        // create a new feed-item node, adding in all of the other node defaults
        drupal_execute('feed_item_node_form', $values, $node);
      }

      // we unset $item each time to prevent any pass by reference memory leaks that PHP encounters with objects in foreach loops
      unset($item);
    }
  }
  else if (isset($feed->error)) {
    watchdog('simplefeed', t('The feed %feed could not be processed due to the following error: %error', array('%feed' => $process_feed->title, '%error' => $feed->error)), WATCHDOG_ERROR, l('view', 'node/'. $process_feed->nid));
  }
}
