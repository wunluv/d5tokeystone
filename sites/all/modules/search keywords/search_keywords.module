<?php
// $Id: search_keywords.module,v 1.17.2.3 2007/04/15 11:09:06 sugree Exp $

/**
 * @file
 * Logs access search_keywords for your site.
 */

/**
 * Implementation of hook_help().
 */
function search_keywords_help($section) {
  switch ($section) {
    case 'admin/help#search_keywords':
      $output = '<p>'. t('The search_keywords module keeps track of search keywords used to find content on this site.') .'</p>';
      return $output;
    case 'admin/modules#description':
      return t('Logs access search_keywords for your site.');
    case 'admin/settings/search_keywords':
      return t('<p>Settings for the search keywords information that Drupal will keep about the site. See <a href="!search_keywords">site search_keywords</a> for the actual information.</p>', array('!search_keywords' => url('admin/logs/search_keywords')));
    case 'admin/logs/search_keywords':
      return t('<p>This page shows you the recent search keywords.</p>');
  }
}

/**
 * Implementation of hook_exit().
 *
 * This is where search_keywords are gathered on page accesses.
 */
function search_keywords_exit() {
  global $user, $recent_activity;

  if (variable_get('search_keywords_enable_access_log', 0)) {
    list($search_engine,$keywords) = _search_keywords_extract(referer_uri());
    if (isset($search_engine) && isset($keywords)) {
      db_query("INSERT INTO {search_keywords_log} (title, path, url, hostname, search_engine, keywords, timestamp) values('%s', '%s', '%s', '%s', '%s', '%s', %d)", function_exists('drupal_get_title')?drupal_get_title():$_GET['q'], $_GET['q'], referer_uri(), $_SERVER['REMOTE_ADDR'], $search_engine, $keywords, time());
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function search_keywords_perm() {
  return array('access search keywords');
}

/**
 * Implementation of hook_menu().
 */
function search_keywords_menu($may_cache) {
  $items = array();

  $access = user_access('access search keywords');
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/search_keywords',
      'title' => t('Search keywords'),
      'description' => t('Administer search keywords.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('search_keywords_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/logs/search_keywords',
      'title' => t('Recent keywords'),
      'description' => t('View recent search keywords.'),
      'callback' => 'search_keywords_recent_keywords',
      'access' => $access,
      'weight' => 3);
  }

  return $items;
}

/**
 * Menu callback; presents the "recent keywords" page.
 */
function search_keywords_recent_keywords() {
/*
  $yahoo = array();
  $google = array();
  $otros = array();
*/
  $header = array(
    array('data' => t('Timestamp'), 'field' => 'a.timestamp', 'sort' => 'desc'),
    array('data' => t('Search Engine'), 'field' => 'a.search_engine'),
    array('data' => t('Keywords'), 'field' => 'a.keywords'),
    array('data' => t('Path'), 'field' => 'a.path'),
  );

  $sql = 'SELECT a.* FROM {search_keywords_log} a' . tablesort_sql($header);

  $result = pager_query($sql, 30);
  while ($log = db_fetch_object($result)) {
    $title = (empty($log->title))?$log->path:$log->title;
    if (module_exists('ip2cc')) {
      $flag = theme('ip2cc_ip_flag',$log->hostname);
    } else {
      $flag = '';
    }
    if (!_search_keywords_is_utf8($log->keywords)) {
      $log->keywords = _search_keywords_to_utf8($log->keywords);
    }
    $rows[] = array(
      array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),
      array('data' => l($log->search_engine, "http://$log->search_engine/")),
      array('data' => "$flag" . l($log->keywords, $log->url)),
      array('data' => l(_search_keywords_column_width(decode_entities($title)), $log->path)));
 }

  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 30, 0);

  return $output;
}
/**
 * Custom function
 */

function node_keywords_recent_keywords() {
  $yahoo = array();
  $google = array();
  $otros = array();
  $header = array(
    array('data' => t('Timestamp'), 'field' => 'a.timestamp', 'sort' => 'desc'),
    array('data' => t('Search Engine'), 'field' => 'a.search_engine'),
    array('data' => t('Keywords'), 'field' => 'a.keywords'),
    array('data' => t('Path'), 'field' => 'a.path'),
  );

  $sql = 'SELECT a.* FROM {search_keywords_log} a' . tablesort_sql($header);

  $result = pager_query($sql, 30);
  while ($log = db_fetch_object($result)) {
    $title = (empty($log->title))?$log->path:$log->title;
    if (module_exists('ip2cc')) {
      $flag = theme('ip2cc_ip_flag',$log->hostname);
    } else {
      $flag = '';
    }
    if (!_search_keywords_is_utf8($log->keywords)) {
      $log->keywords = _search_keywords_to_utf8($log->keywords);
    }
      $nodo = arg(0) .'/'. arg(1);
      if ($nodo == $log->path) {
      $goo = substr_count($log->search_engine, 'google');
      $yah = substr_count($log->search_engine, 'yahoo');
      $msn = substr_count($log->search_engine, 'msn');
      if ($goo > 0) {
      $google[] = "$flag" . $log->keywords;
	  }
      if ($yah > 0) {
      $yahoo[] = "$flag" . $log->keywords;
	  } 
      if ($msn > 0) {
      $messenger[] = "$flag" . $log->keywords;
	  } 
	  if ($goo == 0 && $yah == 0 && $msn == 0) {
				$otros[] = "$flag" . $log->keywords;
              }
      }
 }
       if ($google) {
      print '<fieldset class="collapsible collapsed"><legend>Google</legend><div>';
		$matrizg = array_count_values($google); 
  
		function test_ver ($item2, $clave) {
	    echo "$clave. $item2<br />\n";
		}
        array_walk ($matrizg, 'test_ver');
        print '<div class="clear"></div></div></fieldset>';
       }
       if ($yahoo) {
     print '<fieldset class="collapsible collapsed"><legend>Yahoo!</legend><div>';
	    $matrizy = array_count_values($yahoo);
		function test_ver1 ($item2, $clave) {
	    echo "$clave. $item2<br />\n";
		}
		array_walk ($matrizy, 'test_ver1');
        print '<div class="clear"></div></div></fieldset>';
       }
       if ($messenger) {
      print '<fieldset class="collapsible collapsed"><legend>MSN</legend><div>';
	    $matrizm = array_count_values($messenger);
		function test_ver1 ($item2, $clave) {
	    echo "$clave. $item2<br />\n";
		}
		array_walk ($matrizm, 'test_ver1');
        print '<div class="clear"></div></div></fieldset>';
       }
       if ($otros) {
        print '<fieldset class="collapsible collapsed"><legend>Others</legend><div>';
 	    $matrizo = array_count_values($otros);
		function test_ver2 ($item2, $clave) {
	    echo "$clave. $item2<br />\n";
		}
		array_walk ($matrizo, 'test_ver2');
        print '<div class="clear"></div></div></fieldset>';
       }
}

/**
 * Implementation of hook_settings().
 */
function search_keywords_admin_settings() {
  // access log settings:
  $options = array('1' => t('Enabled'), '0' => t('Disabled'));
  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access log settings'));
  $form['access']['search_keywords_enable_access_log'] = array(
    '#type' => 'radios',
    '#title' => t('Enable access log'),
    '#default_value' =>  variable_get('search_keywords_enable_access_log', 0),
    '#options' => $options,
    '#description' => t('Log each page access.  Required for referrer search_keywords.'));

  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');
  $form['access']['search_keywords_flush_accesslog_timer'] = array(
    '#type' => 'select',
    '#title' => t('Discard access logs older than'),
    '#default_value' => variable_get('search_keywords_flush_accesslog_timer', 259200),
    '#options' => $period,
    '#description' => t('Older access log entries (including referrer search_keywords) will be automatically discarded.  Requires crontab.'));

  return system_settings_form($form);
}

/**
 * Implementation of hook_cron().
 */
function search_keywords_cron() {
  /* clean expired access logs */
  db_query('DELETE FROM {search_keywords_log} WHERE timestamp < %d', time() - variable_get('search_keywords_flush_accesslog_timer', 259200));
}

/**
 * It is possible to adjust the width of columns generated by the
 * search_keywords module.
 */
function _search_keywords_column_width($column, $width = 35) {
  return (drupal_strlen($column) > $width ? truncate_utf8($column, 0, $width) . '...' : $column);
}

function _search_keywords_format_item($title, $link) {
  $link = ($link ? $link : '/');
  $output  = ($title ? "$title<br />" : '');
  $output .= l(_search_keywords_column_width($link), $link);
  return $output;
}

function _search_keywords_extract($url) {
  $engines = array();
  $engines[] = '/http:\/\/(.*?)\/search\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/base\/search\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/blogsearch\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/search\?.*?p=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/results.aspx\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/tags?\/(.*)/i';
  $engines[] = '/http:\/\/(.*?)\/search\/(.*)/i';
  $engines[] = '/http:\/\/(.*?)\/search\.php\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/\?.*?tag=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/cgi-bin\/search\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/aolcom\/search\?.*?query=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/jsp\/([^\.]+)\.jsp\?.*?searchfor=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/p\/search\?.*?qt=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/web\?.*?q=([^&]+)/i';
  $engines[] = '/http:\/\/(.*?)\/searchScreen\?.*?q=([^&]+)/i'; //Seznam.cz
  $engines[] = '/http:\/\/(.*?)\/searchScreen\?.*?w=([^&]+)/i'; //Seznam.cz
  $engines[] = '/http:\/\/(.*?)\/index.php\?.*?q=([^&]+)/i'; //ZoooHoo.cz
  $engines[] = '/http:\/\/(.*?)\/\?.*?q=([^&]+)/i'; //ZoooHoo.cz
  foreach ($engines as $pattern) {
    if (preg_match($pattern, $url, $matches)) {
      $q = urldecode($matches[2]);
      if (!_search_keywords_is_utf8($q)) {
        $q = _search_keywords_to_utf8($q);
      }
      return array($matches[1],$q);
    }
  }
  return array(NULL,NULL);
}

function _search_keywords_is_utf8($string) {
  return preg_match('%^(?:
         [\x09\x0A\x0D\x20-\x7E]            # ASCII
       | [\xC2-\xDF][\x80-\xBF]            # non-overlong 2-byte
       |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
       | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
       |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
       |  \xF0[\x90-\xBF][\x80-\xBF]{2}    # planes 1-3
       | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
       |  \xF4[\x80-\x8F][\x80-\xBF]{2}    # plane 16
  )*$%xs', $string);
  
}

function _search_keywords_to_utf8($string) {
  $s = drupal_convert_to_utf8($string, 'TIS-620');
  if (!$s) {
    $s = _search_keywords_tis620_to_utf8($string);
  }
  return $s;
}

function _search_keywords_tis620_to_utf8($string) {
  if (!ereg("[\241-\377]", $string))
    return $string;
 
    $tis620 = array(
"\xa1" => "\xe0\xb8\x81",
"\xa2" => "\xe0\xb8\x82",
"\xa3" => "\xe0\xb8\x83",
"\xa4" => "\xe0\xb8\x84",
"\xa5" => "\xe0\xb8\x85",
"\xa6" => "\xe0\xb8\x86",
"\xa7" => "\xe0\xb8\x87",
"\xa8" => "\xe0\xb8\x88",
"\xa9" => "\xe0\xb8\x89",
"\xaa" => "\xe0\xb8\x8a",
"\xab" => "\xe0\xb8\x8b",
"\xac" => "\xe0\xb8\x8c",
"\xad" => "\xe0\xb8\x8d",
"\xae" => "\xe0\xb8\x8e",
"\xaf" => "\xe0\xb8\x8f",
"\xb0" => "\xe0\xb8\x90",
"\xb1" => "\xe0\xb8\x91",
"\xb2" => "\xe0\xb8\x92",
"\xb3" => "\xe0\xb8\x93",
"\xb4" => "\xe0\xb8\x94",
"\xb5" => "\xe0\xb8\x95",
"\xb6" => "\xe0\xb8\x96",
"\xb7" => "\xe0\xb8\x97",
"\xb8" => "\xe0\xb8\x98",
"\xb9" => "\xe0\xb8\x99",
"\xba" => "\xe0\xb8\x9a",
"\xbb" => "\xe0\xb8\x9b",
"\xbc" => "\xe0\xb8\x9c",
"\xbd" => "\xe0\xb8\x9d",
"\xbe" => "\xe0\xb8\x9e",
"\xbf" => "\xe0\xb8\x9f",
"\xc0" => "\xe0\xb8\xa0",
"\xc1" => "\xe0\xb8\xa1",
"\xc2" => "\xe0\xb8\xa2",
"\xc3" => "\xe0\xb8\xa3",
"\xc4" => "\xe0\xb8\xa4",
"\xc5" => "\xe0\xb8\xa5",
"\xc6" => "\xe0\xb8\xa6",
"\xc7" => "\xe0\xb8\xa7",
"\xc8" => "\xe0\xb8\xa8",
"\xc9" => "\xe0\xb8\xa9",
"\xca" => "\xe0\xb8\xaa",
"\xcb" => "\xe0\xb8\xab",
"\xcc" => "\xe0\xb8\xac",
"\xcd" => "\xe0\xb8\xad",
"\xce" => "\xe0\xb8\xae",
"\xcf" => "\xe0\xb8\xaf",
"\xd0" => "\xe0\xb8\xb0",
"\xd1" => "\xe0\xb8\xb1",
"\xd2" => "\xe0\xb8\xb2",
"\xd3" => "\xe0\xb8\xb3",
"\xd4" => "\xe0\xb8\xb4",
"\xd5" => "\xe0\xb8\xb5",
"\xd6" => "\xe0\xb8\xb6",
"\xd7" => "\xe0\xb8\xb7",
"\xd8" => "\xe0\xb8\xb8",
"\xd9" => "\xe0\xb8\xb9",
"\xda" => "\xe0\xb8\xba",
"\xdf" => "\xe0\xb8\xbf",
"\xe0" => "\xe0\xb9\x80",
"\xe1" => "\xe0\xb9\x81",
"\xe2" => "\xe0\xb9\x82",
"\xe3" => "\xe0\xb9\x83",
"\xe4" => "\xe0\xb9\x84",
"\xe5" => "\xe0\xb9\x85",
"\xe6" => "\xe0\xb9\x86",
"\xe7" => "\xe0\xb9\x87",
"\xe8" => "\xe0\xb9\x88",
"\xe9" => "\xe0\xb9\x89",
"\xea" => "\xe0\xb9\x8a",
"\xeb" => "\xe0\xb9\x8b",
"\xec" => "\xe0\xb9\x8c",
"\xed" => "\xe0\xb9\x8d",
"\xee" => "\xe0\xb9\x8e",
"\xef" => "\xe0\xb9\x8f",
"\xf0" => "\xe0\xb9\x90",
"\xf1" => "\xe0\xb9\x91",
"\xf2" => "\xe0\xb9\x92",
"\xf3" => "\xe0\xb9\x93",
"\xf4" => "\xe0\xb9\x94",
"\xf5" => "\xe0\xb9\x95",
"\xf6" => "\xe0\xb9\x96",
"\xf7" => "\xe0\xb9\x97",
"\xf8" => "\xe0\xb9\x98",
"\xf9" => "\xe0\xb9\x99",
"\xfa" => "\xe0\xb9\x9a",
"\xfb" => "\xe0\xb9\x9b"
  );
 
  $string=strtr($string,$tis620);
  return $string;
}
