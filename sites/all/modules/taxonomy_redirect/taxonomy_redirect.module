<?php
// $Id: taxonomy_redirect.module,v 1.6.2.2 2008/09/26 01:16:13 agileware Exp $

define('FILTERED_HTML', 1);

/**
 * Implementation of hook_help().
 */
function taxonomy_redirect_help($section) {
  switch ($section) {
    case 'admin/build/taxonomy_redirect':
      return t('On this form you may tell Drupal where taxonomy terms should link to. By default, modules handled by the taxonomy modules link to <b>taxonomy/term/!tid</b>; however, there are many instances where a user may want to override this behavior and provide custom content. You can create redirections for all terms of a vocabulary or you can create them for individual terms.  Indiviual term redirects take precedence over whole vocabulary redirects.  Variables available for the path are <b>!tid</b> (term id), <b>!name</b> (term name), <b>!parent_ids</b> (a path of parent term ids eg/ great_grandparent/grandparent/parent) and <b>!parent_names</b> (a path of parent terms by name).');
  }
}

/**
 * Implemetation of hook_menu().
 */
function taxonomy_redirect_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/build/taxonomy_redirect',
      'title' => t('Taxonomy redirect'),
      'description' => t('Override the default url paths for taxonomy terms.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('taxonomy_redirect_admin'),
      'access' => user_access('administer taxonomy'),
      'type' => MENU_NORMAL_ITEM);
  }
  return $items;
}

/**
 * Admin form
 */
function taxonomy_redirect_admin() {
  drupal_add_js(drupal_get_path('module','taxonomy_redirect').'/taxonomy_redirect.js');

  $form = array();

  // Display a list of redirects

  $result = db_query("SELECT * FROM {taxonomy_redirect}");

  $redirects = array();
  while ($data = db_fetch_object($result)) {
    $redirects[] = $data;
  }

  $form['redirects']['#tree'] = TRUE;

  foreach ($redirects as $i => $redirect) {
    $form['redirects'][$i]['#tree'] = TRUE;

    $vocab = taxonomy_get_vocabulary($redirect->vid);
    $form['redirects'][$i]['vocabulary'] = array(
      '#type' => 'markup',
      '#value' => $vocab->name,
    );
    $form['redirects'][$i]['vid'] = array(
      '#type' => 'hidden',
      '#value' => $redirect->vid,
    );

    if ($redirect->tid && $redirect->tid > 0) {
      $term = taxonomy_get_term($redirect->tid);
      $term_name = $term->name;
    }
    else {
      $term_name = '';
    }

    $form['redirects'][$i]['term'] = array(
      '#type' => 'markup',
      '#value' => $term_name,
    );
    $form['redirects'][$i]['tid'] = array(
      '#type' => 'hidden',
      '#value' => $redirect->tid,
    );

    $form['redirects'][$i]['path'] = array(
      '#type' => 'markup',
    );

    $phpcode = taxonomy_redirect_get_php_filter();
    if ($redirect->filter == $phpcode) {
      $form['redirects'][$i]['path']['#value'] = 'PHP Code';
    }
    else {
      $form['redirects'][$i]['path']['#value'] = $redirect->path;
    }

    $form['redirects'][$i]['separator'] = array(
      '#type' => 'markup',
      '#value' => $redirect->separator_replace,
    );

    $text_array = array_filter(preg_split("/\n|\r/", $redirect->remove_text), 'taxonomy_redirect_filter_empty_lines');
    $remove_text = '';
    foreach ($text_array as $text) {
      $remove_text .= $remove_text ? ", '".$text."'" : "'".$text."'";
    }

    $form['redirects'][$i]['remove_text'] = array(
      '#type' => 'markup',
      '#value' => $remove_text,
    );

   $form['redirects'][$i]['load'] = array(
     '#type' => 'markup',
     '#value' => l('load into editor', '', array('onclick' => 'document.getElementById(\'edit-path\').value = decodeURIComponent( \''.rawurlencode($redirect->path).'\'); document.getElementById(\'edit-filter\').value = \''.$redirect->filter.'\'; document.getElementById(\'edit-separator-replace\').value = decodeURIComponent( \''.rawurlencode($redirect->separator_replace).'\'); document.getElementById(\'edit-remove-text\').value = decodeURIComponent( \''.rawurlencode($redirect->remove_text).'\'); return false;'))
    );

    $form['redirects'][$i]['delete'] = array(
      '#type' => 'checkbox',
      '#return_value' => 1,
      '#default_value' => 0,
    );
  }

  $form['delete_message'] = array(
    '#type' => 'item',
    '#value'=> t("Redirects checked 'delete' will be deleted on submit."),
    '#prefix' => '<span style="color:red;font-weight:bold">',
    '#suffix' => '</span>',
  );

  // Display a select / path combo for adding another term

  $vocabs = taxonomy_get_vocabularies();

  $vocab_options[0] = "- None selected -";

  foreach ($vocabs as $vocab) {
    if(strpos($vocab->module, 'taxonomy') !== FALSE) {
      $vocab_options[$vocab->vid] = $vocab->name;
    }

    $vid = $vocab->vid;
    $term_select = taxonomy_form($vid);
    $term_select['#attributes'] = array(
      'style' => 'display:none',
      'onchange' => 'term(this.value);return false'
    );
    $term_select['#title'] = "";
    $term_select['#id'] = "term_select_$vid";
    $form["term_select_$vid"] = $term_select;
  }

  $form['add_redirect'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new redirect'),
    '#tree' => TRUE,
    '#id' => 'div_addnew'  
  );

  $form['add_redirect']['vocab_select'] = array(
    '#type' => 'select',
    '#options' => $vocab_options,
    '#title' => 'Select vocabulary',
    '#name' => 'vocab_select',
    '#attributes' => array('onchange' => 'vocab(this.value);//return false'),
    '#suffix' => '<div id="div_termselect"></div>',
  );

  $form['term_id'] = array(
    '#type' => 'hidden',
    '#value' => 0,
    '#id' => 'term_id'  
  );

  $form['add_redirect']['filter'] = array(
    '#id' => 'edit-filter',
    '#type' => 'select',
    '#title' => t('Filter'),
    '#options' => _taxonomy_redirect_get_filters(),
    '#description' => t('Select an input format for the term path. If using PHP use opening and closing brackets'),
  );

  $form['add_redirect']['path'] = array(
    '#id' => 'edit-path',
    '#type' => 'textarea',
    '#title' => t('Enter path'),
    '#description' => t('Do not place a leading or trailing /.  Available variables:  !tid, !name, !parent_ids, !parent_names.  You can also enter PHP code (use enclosing PHP tags) to create the path if PHP Code is selected in the filter option above.  Just make your PHP code return the desired path.  Define the function taxonomy_redirect_custom_term_path($term, $path, $separator, $remove_text) to customise further.'),
    '#cols' => 60,
    '#rows' => 5,
  );

  $form['add_redirect']['separator_replace'] = array(
    '#id' => 'edit-separator-replace',
    '#type' => 'textfield',
    '#title' => t('Separator'),
    '#description' => t('Character used to separate words in titles. This will replace any spaces and + characters. Using a space or + character can cause unexpected results.  Leave empty if you don\'t want to replace these characters.'),
    '#maxlength' => 1,
    '#size' => 1,
  );

  $form['add_redirect']['remove_text'] = array(
    '#id' => 'edit-remove-text',
    '#type' => 'textarea',
    '#title' => t('Remove text'),
    '#description' => t('A list of text to be removed from the url.  Put each piece of text to be removed on a new line.  Text can be one or more characters.  This may be useful to remove punctuation.  This removal will be done before separators are replaced. (case sensitive)'),
    '#rows' => 4,
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t("Submit"),
  );

  return $form;
}

/**
 * Function that returns the format value of the PHP Code filter or zero if it doesn't exist.
 */
function taxonomy_redirect_get_php_filter() {
  $phpfilter = 0;
  $filters = filter_formats();
  foreach ($filters as $filter) {
    if ($filter->name == 'PHP code') {
      $phpfilter = $filter->format;
    }
  }
  return $phpfilter;
}

/**
 * Theme the taxonomy_redirect_admin form.
 */
function theme_taxonomy_redirect_admin($form) {
  foreach ($form['redirects'] as $i => $redirect) {
    if (is_numeric($i)) {
      $rows[] = array(
        drupal_render($form['redirects'][$i]['vocabulary']),
        drupal_render($form['redirects'][$i]['term']),
        drupal_render($form['redirects'][$i]['path']),
        drupal_render($form['redirects'][$i]['separator']),
        drupal_render($form['redirects'][$i]['remove_text']),
        drupal_render($form['redirects'][$i]['load']),
        drupal_render($form['redirects'][$i]['delete']),
        drupal_render($form['redirects'][$i]['vid']),
        drupal_render($form['redirects'][$i]['tid']),
      );
    }
  }
  if (!$rows) {
    $rows[] = array(array('data' => t("There are currently no taxonomy redirect entries."), 'colspan' => 6));
  }

  $output .= theme('table', array(t('Vocabulary'), t('Term'), t('Path'), t('Separator'), t('Remove Text'), t('View in editor'), t('delete')), $rows);

  $output .= drupal_render($form);

  return $output;
}

/**
 * Implementation of hook_validate for taxonomy_redirect_admin form.
 */
function taxonomy_redirect_admin_validate($form_id, $form) {

  if ($form['add_redirect']['filter'] != FILTERED_HTML) {
    if (!filter_access($form['add_redirect']['filter'])) {
      form_set_error('add_redirect][filter', t('You are not authorised to use this input format'));
    }

    $phpcode = taxonomy_redirect_get_php_filter();
    if ($form['add_redirect']['filter'] == $phpcode) {
      $test = _taxonomy_redirect_exec_filter($form['add_redirect']['path'], $form['add_redirect']['filter']);
    }
  }

  $vid = $_POST['vocab_select'];

  $any_deletes = FALSE;
  if ($form['redirects']) {
    foreach ($form['redirects'] as $i => $row) {
      if ($row['delete']) {
        $any_deletes = TRUE;
      }
    }
  }

  if ($any_deletes == FALSE) {
    if (!$vid || $vid < 1) {
      form_set_error('add_redirect][vocab_select', t("Error: Please select a vocabulary."));
    }

    if (!$form['add_redirect']['path']) {
      form_set_error('add_redirect][path', t("Error: Please enter a path."));
    }
  }
}

/**
 * Implementation of hook_submit for taxonomy_redirect_admin form.
 */
function taxonomy_redirect_admin_submit($form_id, $form) {

  // Delete checked terms
  if ($form['redirects']) {
    foreach($form['redirects'] as $i => $row) {
      if ($row['delete']) {
        $vid = $row['vid'];
        $tid = $row['tid'];
        if ($tid) {
          db_query("DELETE FROM {taxonomy_redirect} 
                    WHERE vid = '%d' 
                    AND tid = '%d'", $vid, $tid);
        }
        else {
          db_query("DELETE FROM {taxonomy_redirect} 
                    WHERE vid = '%d' 
                    AND tid is null", $vid);
        }
      }
    }
  }

  // Selected term
  $tid = $_POST['term_id'];
  $vid = $_POST['vocab_select'];
  $vocab = taxonomy_get_vocabulary($vid);

  $path = $form['add_redirect']['path'];
  $separator = $form['add_redirect']['separator_replace'];
  $remove_text = $form['add_redirect']['remove_text'];
  $filter = (int)trim($form['add_redirect']['filter']);

  if ($path != '' && $vid > 0) {
    $vocab->module = 'taxonomy_redirect';

    db_query("UPDATE {vocabulary} 
              SET module = 'taxonomy_redirect' 
              WHERE vid = '%d'", $vid);

    if ($tid > 0) {
      db_query("DELETE FROM {taxonomy_redirect} WHERE vid = '%d' AND tid = '%d'", $vid, $tid);
      db_query("INSERT INTO {taxonomy_redirect} (vid, tid, module, path, separator_replace, remove_text, filter) 
                VALUES ('%d', '%d', '%s', '%s', '%s', '%s', '%d')", $vid, $tid, $orig, $path, $separator, $remove_text, $filter);
    }
    else {
      db_query("DELETE FROM {taxonomy_redirect} WHERE vid = '%d' AND tid is NULL", $vid);
      db_query("INSERT INTO {taxonomy_redirect} (vid, tid, module, path, separator_replace, remove_text, filter) 
                VALUES ('%d', NULL, '%s', '%s', '%s', '%s', '%d')", $vid, $orig, $path, $separator, $remove_text, $filter);
    }

    drupal_set_message("Saved redirect");
  }

  return 'admin/build/taxonomy_redirect';
}

/**
 * Returns the available filters for the path field.
 */
function _taxonomy_redirect_get_filters($i = NULL) {
  $filters = array(
    FILTERED_HTML => t("Plain text"),
  );

  $phpcode = taxonomy_redirect_get_php_filter();
  $filters[$phpcode] = 'PHP Code';

  if (isset($i)) {
    return $filters[$i];
  }

  return $filters;
}

/**
 * Function for executing PHP code entered into the path field.
 * If PHP Code is not selected the path is returned as is.
 */
function _taxonomy_redirect_exec_filter($text, $filter) {
  $phpcode = taxonomy_redirect_get_php_filter();

  switch($filter) {
    case $phpcode:
      return check_markup($text, $phpcode, FALSE);
    case FILTERED_HTML:
    default:
      return $text;
  }
}

/**
 * Implementation of hook_term_path() from the taxonomy module.
 */
function taxonomy_redirect_term_path($term) {

  $redirect = db_fetch_object(db_query("SELECT path, separator_replace, remove_text, filter
                                        FROM {taxonomy_redirect} 
                                        WHERE vid = '%d' 
                                        AND tid = '%d'", $term->vid, $term->tid));

  if (!$redirect || !$redirect->path) {
    $redirect = db_fetch_object(db_query("SELECT path, separator_replace, remove_text, filter
                                          FROM {taxonomy_redirect} 
                                          WHERE vid = '%d' 
                                          AND tid IS NULL", $term->vid));
  }

  if (!$redirect || !$redirect->path) {
    return 'taxonomy/term/' . $term->tid;
  }

  // If php code then add the term variables so the code can use them.
  if (substr($redirect->path, 0, 2) == '<?') {
    $text = '<?php ';
    $text .= '$tid = ' . $term->tid . '; ';
    $text .= '$tname = ' . "'" . $term->name . "'; ";
    $openingtag = strpos(strtolower($redirect->path), 'php') + 3;
    $text .= substr($redirect->path, $openingtag);
  }
  else {
    $text = $redirect->path;
  }

  $path = trim(_taxonomy_redirect_exec_filter($text, $redirect->filter));
  $separator = $redirect->separator_replace;
  $remove_text = $redirect->remove_text;

  if (function_exists('taxonomy_redirect_custom_term_path')) {
    return taxonomy_redirect_custom_term_path($term, $path, $separator, $remove_text);
  }

  return taxonomy_redirect_default_term_path($term, $path, $separator, $remove_text);
}

/**
 * Builds the default taxonomy_redirect term path.
 * Can be overridden by the creation of a taxonomy_redirect_custom_term_path function
 */
function taxonomy_redirect_default_term_path($term, $path, $separator = NULL, $remove_text = NULL) {

  $parents = taxonomy_get_parents_all($term->tid);
  $parents = array_reverse($parents);
  // Remove the child term from the array
  array_pop($parents);
  $parent_path = '';
  foreach ($parents as $parent) {
    $parent_names = $parent_names ? $parent_names.'/'.$parent->name : $parent->name;
    $parent_ids = $parent_ids ? $parent_ids.'/'.$parent->tid : $parent->tid;
  }

  $path = t($path, array('!tid' => $term->tid, '!name' => $term->name, '!parent_names' => $parent_names, '!parent_ids' => $parent_ids));

  // Remove text if necessary
  $text = array_filter(preg_split("/\n|\r/", $remove_text), 'taxonomy_redirect_filter_empty_lines');
  if (count($text) != 0) {
      $path = str_replace($text, "", $path);
  }

  // Replace separators if necessary.
  if ($separator || $separator === '0') {
    $path = str_replace(array(' ', '+'), $separator, $path);
  }

  return t($path);
}

function taxonomy_redirect_filter_empty_lines($var) {
  // 13 = carriage return & 0 = null
  if (ord($var) == 13 || ord($var) == 0) {
    return FALSE;
  }
  else {
    return TRUE;
  }

}

/**
 * Builds a custom taxonomy_redirect term path.
 * Use this function if you want to override the normal path creation functionality.
 */
//function taxonomy_redirect_custom_term_path($term, $path, $separator = NULL, $remove_text = NULL) {

//}
