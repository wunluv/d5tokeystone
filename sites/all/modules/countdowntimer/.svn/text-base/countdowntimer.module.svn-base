<?php
// $Id: countdowntimer.module,v 1.8.2.29 2008/04/21 18:47:34 jvandervort Exp $

define('DEFAULT_OUTPUT_FORMAT', '<em>(%dow% %moy%%day%)</em><br/>%days% days + %hours%:%mins%:%secs%');
define('DEFAULT_OUTPUT_FORMAT_1', 'Only %days% days, %hours% hours, %mins% minutes and %secs% seconds left');
define('DEFAULT_OUTPUT_FORMAT_2', '%days% shopping days left');
define('DEFAULT_OUTPUT_FORMAT_3', '<em>(%dow% %moy%%day%)</em><br/>%days% days + %hours%:%mins%:%secs%');
define('DEFAULT_TIMER_COMPLETE', '<em>Timer Completed</em>');
define('DEFAULT_HIGHLIGHT', 'style="color:red"');
define('DEFAULT_HIGHLIGHT_THRESHOLD', '5');
define('DEFAULT_JS_LOAD', '0');

/**
 * Implementation of hook_help().
 */
function countdowntimer_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return ('A module which creates javascript countdown timers.');
    case 'admin/help#countdowntimer':
    $output = <<<HELP_TXT
<p>Please look at the readme.txt file that comes with this module.  It really has a lot of great information.</p>
<p>The countdowmtimer module provides a timer implemented through javascript
which gives you a dynamic countdown (second-by-second) to a certain date 
and time in the future.  Counting up is also supported.  The Countdown Timer Module
uses the onload event then dynamically searches content/blocks/teasers for certain
css classes and then injects itself.  You can configure global format specs on the 
admin page.  You can also format each timer differently using the individual timer overrides.
There are some good examples for node and block usage in the readme.txt file.  
Please look at it.</p>
HELP_TXT;
      $output .= '<p>Usage Example for a Node<br/>&lt;span class="countdowntimer"&gt;Count Up to 11:30<br/>&lt;span style="display:none" name="datetime"&gt;2007-02-26T09:30:00&lt;/span&gt;<br/>&lt;span style="display:none" name="tz_hours"&gt;-8&lt;/span&gt;<br/>';
      $output .= '&lt;span style="display:none" name="dir"&gt;up&lt;/span&gt;<br/>&lt;/span&gt;</p>';
      return ($output);
  }
}

/**
 * Implementation of hook_menu
 */
function countdowntimer_menu($may_cache) {
  $items = array();
  if ( $may_cache ) {
     $items[] = array('path' => 'admin/settings/countdowntimer',
      'title' => t('Countdown Timer'),
      'description' => t("Configure the Countdown timer's display format"),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('countdowntimer_admin_settings'),
      'access' => user_access('administer nodes'),
      'type' => MENU_NORMAL_ITEM);
  }
  else {
    $items[] = array(
      'path' => 'countdowntimer/timerjs',
      'title' => t('none'),
      'access' => 1,
      'type' => MENU_CALLBACK,
      'callback' => 'return_javascript'
    );
    
    if ( countdowntimer_load_js() ) {
      if (variable_get('clean_url', 0)) { 
        drupal_add_js('countdowntimer/timerjs');
      } 
      else {
        drupal_add_js('index.php?q=countdowntimer/timerjs');
      }
    }
  }
  return $items;
}

function countdowntimer_admin_settings() {
  $form = array();

  $form['countdowntimer_js_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Javascript'),
    '#collapsible' => TRUE,
  );
  $form['countdowntimer_js_settings']['countdowntimer_js_load_option'] = array(
    '#type' => 'radios',
    '#title' => t('Javascript load options'),
    '#default_value' => variable_get('countdowntimer_js_load_option', DEFAULT_JS_LOAD),
    '#options' => array(0 => 'Nodes only', 1 => 'Every page', 2 => 'Page list'), 
    '#description' => t("Node view will only load when a single node is viewed.  Every page, is well, EVERY PAGE.  Page list will use the list below."),
  );
  $form['countdowntimer_js_settings']['countdowntimer_js_load_pages'] = array(
      '#type' => 'textarea',
      '#title' => t('Page list'),
      '#default_value' => variable_get('countdowntimer_js_load_pages', ''),
      '#description' => t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );


  $form['countdowntimer_output_overrides'] = array(
    '#type' => 'fieldset',
    '#title' => t('Output Overrides'),
    '#collapsible' => TRUE,
    '#description' => t("Output formats change the display of the timer.  The global format is used unless you choose a preset in the timer tags.  You can hard-code the output format in the timer tags as well.  Available replacement values are: %day%, %month%, %year%, %dow%, %moy%, %years%, %ydays%, %days%, %hours%, %mins%, and %secs%."),
  );

  $form['countdowntimer_output_overrides']['countdowntimer_output_format'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Global output format'),
    '#default_value' => variable_get('countdowntimer_output_format', DEFAULT_OUTPUT_FORMAT),
    '#description' => t("The global output format is the baseline unless you use the presets below."),
  );

  $form['countdowntimer_output_overrides']['overrides'][] = array(
  'countdowntimer_output_format_1' => array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Output format preset 1'),
    '#default_value' => variable_get('countdowntimer_output_format_1', DEFAULT_OUTPUT_FORMAT_1),
  ),
  'countdowntimer_output_format_2' => array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Output format preset 2'),
    '#default_value' => variable_get('countdowntimer_output_format_2', DEFAULT_OUTPUT_FORMAT_2),
  ),
  'countdowntimer_output_format_3' => array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Output format preset 3'),
    '#default_value' => variable_get('countdowntimer_output_format_3', DEFAULT_OUTPUT_FORMAT_3),
  ),
  );

  $form['highlights'] = array(
    '#type' => 'fieldset',
    '#title' => t('Highlight settings'),
    '#description' => t('When a timer is nearing completion, you can change its\' color or use css formatting.'),
    '#tree' => FALSE,
  );
  $form['highlights'][] = array(
  'countdowntimer_highlight' => array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => t('Highlight tagging'),
    '#default_value' => variable_get('countdowntimer_highlight', DEFAULT_HIGHLIGHT),
    '#description' => t("Use style=\"color:red;background-color:white;\" or class=\"\" etc..."),
  ),
  'countdowntimer_highlight_threshold' => array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => t('Highlight threshold (minutes)'),
    '#default_value' => variable_get('countdowntimer_highlight_threshold', DEFAULT_HIGHLIGHT_THRESHOLD),
    '#description' => t("Number of minutes left before highlighting is applied."),
  )
  );

  $form['countdowntimer_complete_statement'] = array(
    '#type' => 'textfield',
    '#size' => 100,
    '#title' => t('Timer complete statement'),
    '#default_value' => variable_get('countdowntimer_complete_statement', DEFAULT_TIMER_COMPLETE),
    '#description' => t("Statement that prints when a timer has completed."),
  );

  return system_settings_form($form);
}

function countdowntimer_admin_settings_validate($form_id, $form_values) {
  
  /*
  foreach ($form_values as $key => $value) {
    if ( substr($key, 0, 15) == "countdowntimer_" ) {
      if ( ! strpos($value, "'") === false ) {
        form_set_error($form_id, t("Countdown Timer admin settings may not contain single quotes(')."));
      }
    }
  }
  */
} 

function countdowntimer_load_js() {
	
	$js_load_option = variable_get('countdowntimer_js_load_option', DEFAULT_JS_LOAD);
  if ( $js_load_option == 1 ) {
	  //every page
	  return TRUE;
	} else if ($js_load_option == 2 || $js_load_option == 0) {
		if ($js_load_option == 0) {
			// all nodes
			$pages = 'node/*';
		} else {
			// page list
			$pages = variable_get('countdowntimer_js_load_pages','');
		}
	  $path = drupal_get_path_alias($_GET['q']);
	  $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($pages, '/')) .')$/';
	  // Compare with the internal and path alias (if any).
	  $page_match = preg_match($regexp, $path);
	  
	  if ($path != $_GET['q']) {
	    $page_match = $page_match || preg_match($regexp, $_GET['q']);
	  }
	  return $page_match == 1;
	}
}

function clean_for_javascript($format_string='') {
  $patterns =      array('/\n/','/\r/', '/\'/');
  $replacements = array('<br/>','','"' );
  return preg_replace($patterns, $replacements, $format_string);
}

function return_javascript() {
  drupal_set_header('Content-Type: text/javascript');

  $output_format = "'".   clean_for_javascript(variable_get('countdowntimer_output_format', DEFAULT_OUTPUT_FORMAT)) ."'";
  $output_format_1 = "'". clean_for_javascript(variable_get('countdowntimer_output_format_1', DEFAULT_OUTPUT_FORMAT_1)) ."'";
  $output_format_2 = "'". clean_for_javascript(variable_get('countdowntimer_output_format_2', DEFAULT_OUTPUT_FORMAT_2)) ."'";
  $output_format_3 = "'". clean_for_javascript(variable_get('countdowntimer_output_format_3', DEFAULT_OUTPUT_FORMAT_3)) ."'";
  $timer_complete = "'".  clean_for_javascript(variable_get('countdowntimer_complete_statement', DEFAULT_TIMER_COMPLETE)) ."'";
  $highlight = "'".       clean_for_javascript(variable_get('countdowntimer_highlight', DEFAULT_HIGHLIGHT)) ."'";
  $threshold = "'".       clean_for_javascript(variable_get('countdowntimer_highlight_threshold', DEFAULT_HIGHLIGHT_THRESHOLD)) ."'";
  
  $ouput = <<<JAVASCRIPT_CODE
    
    // \$Id: countdowntimer.module,v 1.8.2.29 2008/04/21 18:47:34 jvandervort Exp $
    if (Drupal.jsEnabled) {
      $(document).ready(countdown_auto_attach);
    }
  
    var formats = [$output_format,$output_format_1, $output_format_2, $output_format_3];
    
    function jstimer(timer_element) {
      /* defaults */
      var d = {year:"2068",month:"1",day:"1",hour:"00",min:"00",sec:"00",tz_hours:-8,dir:"down",format_num:0, format_txt:"", timer_complete:new String($timer_complete), highlight:new String($highlight).split(/=/), threshold:new Number($threshold)};
      /* jstimer.properties */
      this.element = timer_element;
      this.d = d;
      /* jstimer.methods */
      this.parse_datetime = parse_datetime;
      this.update_timer = update_timer;

      /* get tagged datetime */
      this.parse_datetime();

      this.to_date = new Date();
      this.to_date.setFullYear(d.year,d.month-1,d.day);
      this.to_date.setHours(d.hour);
      this.to_date.setMinutes(d.min);
      this.to_date.setSeconds(d.sec);
      
      var tz_offset_client = -(this.to_date.getTimezoneOffset()*60*1000);  //getTimezoneOffset: minutes between the time on the current machine and UTC
      var tz_offset = (d.tz_hours*60*60*1000);
      var msecs =  this.to_date.getTime();
      this.to_date.setTime(msecs - tz_offset + tz_offset_client);
     
      var myDays=["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
      var myMonths=new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
      dow = myDays[this.to_date.getDay()];
      moy = myMonths[this.to_date.getMonth()];
      // replace the static stuff in the format string
      if ( d.format_txt != "" ) {
          this.outformat = d.format_txt;
      } else {
        this.outformat = formats[d.format_num];
      }
      this.outformat = this.outformat.replace(/%day%/,d.day);
      this.outformat = this.outformat.replace(/%month%/,d.month);
      this.outformat = this.outformat.replace(/%year%/,d.year);
      this.outformat = this.outformat.replace(/%moy%/,moy);
      this.outformat = this.outformat.replace(/%dow%/,dow);
    }

    function parse_datetime() {
      var strdate = $(this.element).children("span[@name=datetime]").html();
      if ( String(strdate) != "null" ) {
        /* 1995-02-04T15:00:00   International Standard ISO 8601 */
        this.d.original_date = strdate;
        var date_and_time = String(strdate).split('T');
        if ( date_and_time.length == 2 ) {
          var date_only = date_and_time[0].split('-');
          if ( date_only.length == 3 ) {
            this.d.year  = date_only[0];
            this.d.month = date_only[1];
            this.d.day   = date_only[2];
          }
          var time_only = String(date_and_time[1]).split(':');
          this.d.hour = time_only[0] || this.d.hour;
          this.d.min  = time_only[1] || this.d.min;
          this.d.sec  = time_only[2] || this.d.sec;
        }
        this.d.dir = $(this.element).children("span[@name=dir]").html() || this.d.dir;
        this.d.tz_hours = $(this.element).children("span[@name=tz_hours]").html() || this.d.tz_hours;
        this.d.format_num = $(this.element).children("span[@name=format_num]").html() || this.d.format_num;
        this.d.format_txt = $(this.element).children("span[@name=format_txt]").html() || "";
        if ( String(this.d.format_txt).match("'") ) {
          this.d.format_txt = "<span style=\"color:red;\">Format may not contain single quotes(').</span>";
        }
        this.d.threshold = $(this.element).children("span[@name=threshold]").html() || this.d.threshold;
        this.d.timer_complete = $(this.element).children("span[@name=complete]").html() || this.d.timer_complete;

      } else {
        /* legacy format */
        strdate = $(this.element).html();
        this.d.dir = "down";
        var date_and_time = strdate.split(' ');
        if (typeof(date_and_time[0]) != 'undefined' && date_and_time[0] != '') {
          var date_only = date_and_time[0].split('-');
          this.d.year  = date_only[0] || this.d.year;
          this.d.month = date_only[1] || this.d.month ;
          this.d.day   = new String(date_only[2] || this.d.day) ;
        } 
        if (typeof(date_and_time[1]) != 'undefined' && date_and_time[1] != '') {
          var time_only = date_and_time[1].split(':');
          this.d.hour = time_only[0] || this.d.hour;
          this.d.min  = time_only[1] || this.d.min;
          this.d.sec  = time_only[2] || this.d.sec;
        } 
        if (typeof(date_and_time[2]) != 'undefined' && date_and_time[2] != '') {
          this.d.tz_hours = date_and_time[2];
        } 
        if (typeof(date_and_time[3]) != 'undefined' && date_and_time[3] != '') {
          if ( date_and_time[3] > 0 && date_and_time[3] < 4 ) {
            this.d.format_num = date_and_time[3];
          }
        }       
      }
    }
    
    // update_timer: returns false if the timer is done.
    function update_timer() {
      var now_date = new Date();
      var diff_secs;
      if ( this.d.dir == "down" ) {
        diff_secs = Math.floor((this.to_date.getTime() - now_date.getTime()) / 1000);
      } else {
        diff_secs = Math.floor((now_date.getTime() - this.to_date.getTime()) / 1000);
      }

      if ( this.d.dir == "down" && diff_secs < 0 ) {
        /* timer counting down */
        $(this.element).html(this.d.timer_complete);
        return false;
      } else {
        var years = Math.floor(diff_secs / 60 / 60 / 24 / 365.25); 
        var days = Math.floor(diff_secs / 60 / 60 / 24);
        var ydays = Math.ceil(days - (years * 365.25)); 
        var hours = Math.floor(diff_secs / 60 / 60) - (days * 24);
        var minutes = Math.floor(diff_secs / 60) - (hours * 60) - (days * 24 * 60);
        var seconds = diff_secs - (minutes * 60) - (hours * 60 * 60) - (days * 24 * 60 * 60);
        
        var outhtml = new String(this.outformat);
        outhtml = outhtml.replace(/%years%/,years);
        outhtml = outhtml.replace(/%ydays%/,ydays);
        outhtml = outhtml.replace(/%days%/,days);
        outhtml = outhtml.replace(/%hours%/,LZ(hours));
        outhtml = outhtml.replace(/%mins%/,LZ(minutes));
        outhtml = outhtml.replace(/%secs%/,LZ(seconds));
        
        if ( days == 1 ) {
          outhtml = outhtml.replace(/days/,'day'); //kludge, find a better way
        }
        if ( years == 1 ) {
          outhtml = outhtml.replace(/years/,'year'); //kludge, find a better way
        }

        if ( this.d.dir == "up" && diff_secs <= 0 ) {
          $(this.element).html('<span style="color:red;">Count Up Date is in the future<br/>orig_target=' + this.d.original_date + ' ' + this.d.tz_hours + '<br/>local=' + this.to_date + '</span>');
        } else if ( this.d.dir == "down" && (diff_secs <= (this.d.threshold * 60)) ) {
          $(this.element).html('<span ' + this.d.highlight[0] + '=' + this.d.highlight[1] + '>' +  outhtml + '</span>');
        } else {
          $(this.element).html(outhtml);
        }
        
        return true;
      } 
    }
    

    var running = 0;
    var timer_stack = new Array();
    function countdown_auto_attach() {
      $(".countdowntimer").each(
        function(i) {  // arg i is the position in the each fieldset
          var t = new jstimer(this,1);
          timer_stack[timer_stack.length] = t;
          if ( running == 0 ) {
            running = 1;
            timer_loop();
          }
        }
      );
    }
    function timer_loop() {
      for (var i = timer_stack.length - 1; i >= 0; i--) {
        if ( timer_stack[i].update_timer() == false ) {
          timer_stack.splice(i, 1);
        }
      }
      setTimeout('timer_loop()',999);
    }
    function LZ(x) {
      return (x >= 10 || x < 0 ? "" : "0") + x;
    }
JAVASCRIPT_CODE;
  
  print $ouput;
}
