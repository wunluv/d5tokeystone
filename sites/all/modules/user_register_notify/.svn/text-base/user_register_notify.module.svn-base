<?php
// $Id: user_register_notify.module,v 1.1.2.21 2009/01/21 02:08:29 rmiddle Exp $
// Built for Drupal 5
/**
 * @file
 * Notifies administrator of new user registrations.
 */


/**
 * Implementation of hook_menu().
 */
function user_register_notify_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/register_notify',
      'title' => t('User Register Notify'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('user_register_notify_settings'),
      'description' => t('Configure the User Register Notify module.'),
      'access' => user_access('administer site configuration')
    );
  }
  else {
    define('USER_REGISTER_NOTIFY_SUBJECT', t('Account details for !user_name at !site'));
    define('USER_REGISTER_NOTIFY_BODY', t("!user_name (!user_view) has created account.\n\nEdit user: !user_edit\n\nDelete User: !user_delete\n\n!profile"));
  }
  return $items;
}


/**
 * Menu callback for admin settings form.
 */
function user_register_notify_settings() {
  $form['user_notify'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Alerts'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $user_notify_opts = array(
    'Custom' => t('Send to a custom email address'),
    'Role' => t('Send to a specific role(s)'),
    'Both' => t('Send to Both a custom email address and a specific role(s)'),
    );
  $form['user_notify']['user_register_notify_type'] = array(
    '#type' => 'radios',
    '#options' => $user_notify_opts,
    '#title' => t('Send by Role or Custom Email address?'),
    '#default_value' => variable_get('user_register_notify_type', 'Custom'),
    '#prefix' => '<div class="user-register-notify-user-notify">',
    '#suffix' => '</div>',
    );

  $form['user_notify']['user_register_notify_mailto'] = array(
    '#type' => 'textfield',
    '#title' => t('Send notifications to this custom email address'),
    '#description' => t('If you leave this blank, the site email address, %mailto, will be used.', array('%mailto' => variable_get('site_mail', ini_get('sendmail_from')))),
    '#default_value' => variable_get('user_register_notify_mailto', variable_get('site_mail', ini_get('sendmail_from'))),
  );
  $user_roles = user_roles(TRUE);
  $form['user_notify']['user_register_notify_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Send to a specific role(s)'),
    '#options' => $user_roles,
    '#description' => t('All users with these checked roles will receive a notification email when selected.'),
    '#default_value' => variable_get('user_register_notify_roles', ''),
  );
  $form['user_register_notify_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Subject'),
    '#default_value' => variable_get('user_register_notify_subject', USER_REGISTER_NOTIFY_SUBJECT),
    '#required' => TRUE,
    '#description' => t('Subject of user registration messages')
  );
  $form['user_register_notify_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Body'),
    '#default_value' => variable_get('user_register_notify_body', USER_REGISTER_NOTIFY_BODY),
    '#rows' => 10,
    '#required' => TRUE,
    '#description' => t('Customize the body of the user registration notification email.') .' '. t('Available variables are:') .' !user_name, !user_mail, !user_view, !user_edit, !user_delete, !site, !uri, !uri_brief, !date, !action, !profile, !og.'
  );
  $alert_options = array(
    'create' => 'Receive Email upon user creation.',
    'update' => 'Receive Email upon user creation and update.',
    );
  $form['user_register_notify_alert'] = array(
    '#type' => 'radios',
    '#options' => $alert_options,
    '#title' => t('Page Sort order'),
    '#default_value' => variable_get('user_register_notify_alert', 'create'),
    '#description' => t('When to send an Email'),
    '#required' => FALSE
  );
  return system_settings_form($form);
}

function user_register_notify_settings_validate($form_id, $form_values) {
  $notify_type = $form_values['user_register_notify_type'];
  if (($notify_type == 'Role') || ($notify_type == 'Both')) {
    foreach ($form_values['user_register_notify_roles'] as $key => $value) {
      if (!is_numeric($key)) {
        form_set_error('user_register_notify_roles', t('Invalid role identifier submitted.'));
      }
    }
  }
}

function user_register_notify_setup_email(&$edit, &$account, $action = 'insert') {
  // Notify administrator of new user only if this is not first user and
  // if visitors can create accounts without administrator's approval.
  // In case when accounts must be created with administrator's approval
  // there is already a 'pending approval' e-mail notification.
  if ($account->uid != 1 && (variable_get('user_register', 1) == 1 ? $account->status : !$account->status)) {
    $notify_type = variable_get('user_register_notify_type', 'Custom');
    $account_data = "";
    $profile_data = "";
    $og_data = "";

    $account_info = user_load(array('uid' => $account->uid));
    $body .= "\n\nAccount Information:\n\n";
    if (module_exists('profile')) {
      $result = db_query('SELECT f.title, f.type, v.value FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE uid = %d', $account->uid);
      while ($field = db_fetch_object($result)) {
        switch ($field->type) {
          case 'date':
            $date_field = unserialize($field->value);
            if (is_array($date_field)) {
              $date_timestamp = mktime(0, 0, 0, $date_field['month'], $date_field['day'], $date_field['year']);
              $profile_data .= sprintf("%s: %s\n", $field->title, format_date($date_timestamp));
            }
            break;
          case 'checkbox':
            if ($field->value)
              $profile_data .= sprintf(t("%s: Checked\n"), $field->title);
            else
              $profile_data .= sprintf(t("%s: Not Checked\n"), $field->title);
            break;
          default:
            $profile_data .= sprintf("%s: %s\n", $field->title, $field->value);
        }
      }
    }
    else {
      $profile_data = t("Profile Module Not Installed.\n");
    }

    if (module_exists('og')) {
     $result = db_query('SELECT o.description, n.title FROM {og_uid} u INNER JOIN {og} o ON o.nid = u.nid INNER JOIN {node} n on n.nid = u.nid WHERE u.uid = %d', $account->uid);
      $og_data = t("Organic groups belonged to:\n");

      while ($og = db_fetch_object($result)) {
        $og_data .= sprintf("%s - %s\n", $og->title, $og->description);
      }
    }
    else {
      $og_data = t("Organic Groups Module Not Installed.\n");
    }
    $variables = array(
      '!user_name' => isset($account->realname) ? $account->realname : $account->name,
      '!user_mail' => $account->mail,
      '!user_view' => url('user/'. $account->uid, NULL, NULL, TRUE),
      '!user_edit' => url('user/'. $account->uid .'/edit', NULL, NULL, TRUE),
      '!user_delete' => url('user/'. $account->uid .'/delete', NULL, NULL, TRUE),
      '!site' => variable_get('site_name', 'Drupal'),
      '!uri' => $base_url,
      '!uri_brief' => drupal_substr($base_url, drupal_strlen('http://')),
      '!date' => format_date(time()),
      '!profile' => check_plain($profile_data),
      '!og' => check_plain($og_data),
      '!action' => $action == 'insert'? 'create' : 'update',
      );
    $subject = t(variable_get('user_register_notify_subject', USER_REGISTER_NOTIFY_SUBJECT), $variables);
    $body = t(variable_get('user_register_notify_body', USER_REGISTER_NOTIFY_BODY), $variables);
    $from = variable_get('site_mail', ini_get('sendmail_from'));

    switch ($notify_type) {
      case 'Custom':
        $to = variable_get('user_register_notify_mailto', $from);
        break;
      case 'Both':
        $to = variable_get('user_register_notify_mailto', $from);
        // There is no break there for a reson.
      case 'Role':
        $roles = implode(',', variable_get('user_register_notify_roles', array()));
        if (!empty($roles)) {
          //$result = db_query("SELECT mail FROM {users} AS u INNER JOIN {users_roles} AS r ON u.uid = r.uid WHERE r.rid IN(%s)". $roles);
         //$result = db_query("SELECT mail FROM {users} AS u INNER JOIN {users_roles} AS r ON u.uid = r.uid WHERE r.rid IN(%s)", implode(',', $roles));
	  $emails = array();
          while ($mail = db_fetch_object($result)) {
            $emails[] = $mail->mail;
          }
          if (!empty($emails)) {
            $to = $to .' '. implode(', ', $emails);
          }
        }
        break;
    }
    drupal_mail('user-register-notify-admin', $to, $subject, $body, $from, array('Reply-To' => $to));
    watchdog('user_register_notify', check_plain($to));
    watchdog('user_register_notify', check_plain($account_data));
  }
}

/**
 * Implementation of hook_user().
 */
function user_register_notify_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      user_register_notify_setup_email($edit, $account);
      break;
    case 'update':
      if (variable_get('user_register_notify_alert', 'create') == 'update')
        user_register_notify_setup_email($edit, $account, 'update');
      break;
  }
}
