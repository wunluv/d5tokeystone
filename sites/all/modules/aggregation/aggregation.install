<?php

// $Id: aggregation.install,v 1.4.2.17 2008/12/27 03:56:46 mistknight Exp $

function aggregation_install()
{
	switch ($GLOBALS['db_type'])
	{
		case 'mysqli':
		case 'mysql':

			$query = <<<begin_create_query
				CREATE TABLE IF NOT EXISTS {aggregation_feed} (
					`nid` int(10) unsigned NOT NULL,
					`original_author` varchar(100) NOT NULL default '',
					`url` varchar(250) NOT NULL,
					`username` varchar(50) NOT NULL default '',
					`password` varchar(50) NOT NULL default '',
					`refresh_interval` int(10) unsigned NOT NULL,
					`title_as_guid_interval` int(10) unsigned NOT NULL,
					`promote_to_frontpage` int(10) NOT NULL default 0,
					`time_to_live` int(10) NOT NULL default 0,
					`item_categories` text NOT NULL,
					`aggregation_feed_options` text NOT NULL,
					`etag` varchar(255) NOT NULL default '',
					`last_modified` int(11) NOT NULL default 0,
					`last_refreshed` int(11) NOT NULL default 0,
					PRIMARY KEY  (`nid`)
				) TYPE=MyISAM /*!40100 DEFAULT CHARACTER SET utf8 */;
begin_create_query;

			db_query($query);

			$query = <<<begin_create_query
				CREATE TABLE IF NOT EXISTS {aggregation_item} (
					`nid` int(10) unsigned NOT NULL,
					`url` varchar(250) NOT NULL default '',
					`aggregation_item_options` text NOT NULL,
					`original_author` varchar(100) NOT NULL default '',
					`original_comments` varchar(250) NOT NULL,
					`story_guid` int unsigned NOT NULL default 0,
					`fid` int(10) unsigned NOT NULL default 0,
					`image_id` int(10) unsigned NOT NULL default 0,
					`image_guid` int unsigned NOT NULL default 0,
					PRIMARY KEY  (`nid`),
					INDEX (`story_guid`),
					INDEX (`image_id`),
					INDEX (`fid`),
					INDEX (`image_guid`)
				) TYPE=MyISAM /*!40100 DEFAULT CHARACTER SET utf8 */;
begin_create_query;

			db_query($query);

			$vocab_count = db_query("SELECT COUNT(vid) AS vid_count FROM {vocabulary} ".
				"WHERE name = '%s'", 'Aggregation Feed Types');

			$vocab_count = db_fetch_object($vocab_count);
			$vocab_count = $vocab_count->vid_count;

			if ($vocab_count == 0)
				{
					$vocab = array();

					$vocab['name'] = 'Aggregation Feed Types';
					$vocab['description'] = 'All Aggregation Feed Types are to be declared as terms under this vocabulary';
					$vocab['help'] = 'Add terms that represent the feed types. Refer to readme for details.';
					$vocab['multiple'] = 0;
					$vocab['required'] = 1;
					$vocab['module'] = 'aggregation';
					$vocab['nodes']['aggregation_feed'] = 1;
					$vocab['tags'] = 0;
					$vocab['weight'] = 0;

					taxonomy_save_vocabulary($vocab);

					variable_set('aggregation_current_vid', $vocab['vid']);

					$term = array();

					$term['name'] = 'RSS20';
					$term['description'] = 'This is an RSS 2.0 feed handler';
					$term['vid'] = $vocab['vid'];
					$term['weight'] = 0;

					taxonomy_save_term($term);

					unset($term);
					$term = array();

					$term['name'] = 'ATOM10';
					$term['description'] = 'This is an ATOM 1.0 feed handler';
					$term['vid'] = $vocab['vid'];
					$term['weight'] = 0;

					taxonomy_save_term($term);

					unset($term);
					$term = array();

					$term['name'] = 'RDF10';
					$term['description'] = 'This is an RDF 1.0 feed handler';
					$term['vid'] = $vocab['vid'];
					$term['weight'] = 0;

					taxonomy_save_term($term);
				}
			break;
	}

	aggregation_update_6();
}

//update function for 4.7 branch
function aggregation_update_1()
{
	$ret = array();

	switch ($GLOBALS['db_type'])
	{
		case 'mysql':
		case 'mysqli':
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD aggregate_to_moderation_queue enum('yes', 'no') NOT NULL default 'no' AFTER publish_new_items");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD sticky_items enum('yes', 'no') NOT NULL default 'no' AFTER aggregate_to_moderation_queue");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD enable_comments_on_articles enum('yes','no') NOT NULL default 'no' AFTER sticky_items");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD enable_comments_on_images enum('yes','no') NOT NULL default 'no' AFTER enable_comments_on_articles");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD promote_to_frontpage int(10) NOT NULL default 0 AFTER enable_comments_on_images");
			break;
	}

	return $ret;
}

// update function for drupal 5 branch
function aggregation_update_2()
{
	$ret = array();

	switch ($GLOBALS['db_type'])
	{
		case 'mysql':
		case 'mysqli':
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD link_items_to_original_urls enum('yes', 'no') NOT NULL default 'yes' AFTER delete_old_items");
			$ret[] = update_sql("ALTER TABLE {aggregation_item} ADD link_to_original_url enum('yes', 'no') NOT NULL default 'yes' AFTER url");
			break;
	}

	return $ret;
}

function aggregation_update_3()
{
	$current_vid = variable_get('aggregation_current_vid', 0);
	if ($current_vid)
	{
		$term_exists = taxonomy_get_term_by_name('ATOM10');
		if (count($term_exists) > 0) return array();

		$term = array();

		$term['name'] = 'ATOM10';
		$term['description'] = 'This is an ATOM 1.0 feed handler';
		$term['vid'] = $current_vid;
		$term['weight'] = 0;

		taxonomy_save_term($term);
	}
	else
		drupal_set_message("Something wrong occurred during update! Please report this to module maintainer!");

	return array();
}

function aggregation_update_4()
{
	db_query("ALTER TABLE {aggregation_item} modify `story_guid` bigint");
	db_query("ALTER TABLE {aggregation_item} modify `image_guid` bigint");

	$original_items = db_query("SELECT * FROM {aggregation_item}");

	while ($row = db_fetch_object($original_items))
	{
		$update_statement = "";

		$new_story_guid = sprintf('%u', $row->story_guid);
		$new_image_guid = sprintf('%u', $row->image_guid);

		if ($row->story_guid != $new_story_guid)
			$update_statement .= "`story_guid` = $new_story_guid";

		if ($row->image_guid != $new_image_guid)
			if ($update_statement == '')
				$update_statement .= "`image_guid` = $new_image_guid";
			else
				$update_statement .= ",`image_guid` = $new_image_guid";

		if ($update_statement == '') continue;

		db_query("UPDATE {aggregation_item} SET $update_statement WHERE nid = %d", $row->nid);
	}

	db_query("ALTER TABLE {aggregation_item} modify `story_guid` int unsigned");
	db_query("ALTER TABLE {aggregation_item} modify `image_guid` int unsigned");

	return array();
}

function aggregation_update_5()
{
	$current_vid = variable_get('aggregation_current_vid', 0);
	if ($current_vid)
	{
		$term_exists = taxonomy_get_term_by_name('RDF10');
		if (count($term_exists) > 0) return array();

		$term = array();

		$term['name'] = 'RDF10';
		$term['description'] = 'This is an RDF 1.0 feed handler';
		$term['vid'] = $current_vid;
		$term['weight'] = 0;

		taxonomy_save_term($term);
	}
	else
		drupal_set_message("Something wrong occurred during update! Please report this to module maintainer!");

	return array();
}

function aggregation_update_6()
{
    if (db_num_rows(db_query("SHOW TABLES LIKE '{" . db_escape_table('aggregator2_feed') . "}'")) == 0) return;
    if (db_num_rows(db_query("SHOW TABLES LIKE '{" . db_escape_table('aggregator2_item') . "}'")) == 0) return;
    
    $aggregate_categories = db_result(db_query("SELECT COUNT(*) FROM {system} WHERE name = '%s' AND status = 1"), 'aggregator2_autotaxonomy');

    if (!ini_get('safe_mode'))
		set_time_limit(30 * 60);

    db_query("UPDATE {vocabulary_node_types} SET type = '%s' WHERE type = '%s'", 'aggregation_feed', 'aggregator2_feed');
    db_query("UPDATE {vocabulary_node_types} SET type = '%s' WHERE type = '%s'", 'aggregation_feed', 'aggregator2-feed');
    db_query("UPDATE {vocabulary_node_types} SET type = '%s' WHERE type = '%s'", 'aggregation_item', 'aggregator2_item');
    db_query("UPDATE {vocabulary_node_types} SET type = '%s' WHERE type = '%s'", 'aggregation_item', 'aggregator2-item');

    $feeds = db_query("SELECT af.* FROM {aggregator2_feed} af, {node} n WHERE af.nid = n.nid");

    while ($row = db_fetch_object($feeds))
    {
        if (db_fetch_object(db_query("SELECT COUNT(nid) AS feed_count FROM {aggregation_feed} WHERE url = '%s'", $row->url))->feed_count > 0) continue;

        db_query("UPDATE {node} SET type = '%s' WHERE nid = %d", 'aggregation_feed', $row->nid);

        $taxonomies_old_style = unserialize($row->item_taxonomy);

        $taxonomies_new_style = array();

        foreach ($taxonomies_old_style AS $key => $value)
        {
            $vid = db_query("SELECT vid FROM {term_data} WHERE tid = %d", $value);
            if (db_num_rows($vid) == 0) continue;
            $vid = db_fetch_object($vid)->vid;
            $taxonomies_new_style[$vid][$value] = $value;
        }

        $row->item_taxonomy = serialize($taxonomies_new_style);

		$aggregation_feed_options['enabled'] = $row->freezed ? 0 : 1;
		$aggregation_feed_options['publish_new_items'] = ($row->item_status ? 1 : 0);
		$aggregation_feed_options['sticky_items'] = 0;
		$aggregation_feed_options['aggregate_to_moderation_queue'] = 0;
		$aggregation_feed_options['enable_comments_on_articles'] = 0;
		$aggregation_feed_options['enable_comments_on_images'] = 0;
		$aggregation_feed_options['link_items_to_original_urls'] = ($row->item_show_link == 1 ? 0 : ($row->item_show_link == 2 ? 2 : ($row->item_show_link == 0 ? 3 : 1)));
		$aggregation_feed_options['aggregate_item_categories'] = $aggregate_categories > 0 ? 1 : 0;
		$aggregation_feed_options['update_existing_aggregation_items'] = $row->update_items ? 1 : 0;
		$aggregation_feed_options['link_items_to_original_comments'] = 0;
		

        db_query("INSERT INTO {aggregation_feed} VALUES ".
        "(%d, '%s', '%s', '%s', '%s', %d, %d, %d, %d, '%s', '%s', '%s', %d, %d)",
        $row->nid, $row->author, $row->url, '', '', (int)($row->refresh/60), 0, 0, $row->promoted_items, $row->item_taxonomy, serialize($aggregation_feed_options), $row->etag, $row->modified, $row->checked);

        $items = db_query("SELECT ai.*, n.title FROM {aggregator2_item} ai, {node} n WHERE ai.fid = %d AND ai.nid = n.nid", $row->nid);
        while ($row2 = db_fetch_object($items))
        {
            db_query("UPDATE {node} SET type = '%s' WHERE nid = %d", 'aggregation_item', $row2->nid);

            $row2->guid = sprintf('%u', crc32(trim($row2->guid) == '' ? $row2->title : $row2->guid));
            
			$aggregation_item_options['link_to_original_url'] = ($row->item_show_link == 1 ? 0 : ($row->item_show_link == 2 ? 2 : ($row->item_show_link == 0 ? 3 : 1)));
			$aggregation_item_options['link_to_original_comment'] = 0;
			
            db_query("INSERT INTO {aggregation_item} VALUES (%d, '%s', '%s', '%s', '%s', %s, %d, ".
		"%d, %s)", $row2->nid, $row2->link, serialize($aggregation_item_options), (trim($row2->author) == '' ? (trim($row->author) == '' ? 'unspecified' : $row->author): $row2->author), '', $row2->guid, $row2->fid, 0, 0);
        }
    }

    db_query("DROP TABLE {aggregator2_feed}");
    db_query("DROP TABLE {aggregator2_item}");
}

//update function for 4.7 & 5 branch
function aggregation_update_7()
{
	$ret = array();

	switch ($GLOBALS['db_type'])
	{
		case 'mysql':
		case 'mysqli':
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} modify `url` varchar(250) NOT NULL");
			$ret[] = update_sql("ALTER TABLE {aggregation_item} modify `url` varchar(250) NOT NULL");
			break;
	}

	return $ret;
}


function aggregation_update_8()
{
  $ret = array();

	switch ($GLOBALS['db_type'])
	{
		case 'mysql':
		case 'mysqli':
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD aggregation_feed_options text NOT NULL AFTER item_categories");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} ADD time_to_live int(10) NOT NULL default 0 AFTER promote_to_frontpage");
			$ret[] = update_sql("ALTER TABLE {aggregation_item} ADD aggregation_item_options text NOT NULL AFTER link_to_original_url");
			$ret[] = update_sql("ALTER TABLE {aggregation_item} ADD original_comments varchar(250) NOT NULL AFTER original_author");
			break;
	}

  $old_feed_data = db_query("SELECT * FROM {aggregation_feed}");
 
  while ($row = db_fetch_object($old_feed_data))
  {
    $options_array = array();
    
    $options_array['aggregate_to_moderation_queue'] = 
      ($row->aggregate_to_moderation_queue == 'yes' ? 1 : 0);
    $options_array['enable_comments_on_articles'] = 
      ($row->enable_comments_on_articles == 'yes' ? 1 : 0);
    $options_array['enable_comments_on_images'] = 
      ($row->enable_comments_on_images == 'yes' ? 1 : 0);
    $options_array['enabled'] = 
      ($row->enabled == 'yes' ? 1 : 0);
    $options_array['link_items_to_original_urls'] = 
      ($row->link_items_to_original_urls == 'yes' ? 1 : 0);
    $options_array['publish_new_items'] = 
      ($row->publish_new_items == 'yes' ? 1 : 0);
    $options_array['sticky_items'] = 
      ($row->sticky_items == 'yes' ? 1 : 0);
    
    $time_to_live = 0;
    
    if ($row->delete_old_items == 'yes')
      $time_to_live = variable_get('aggregation_item_time_to_live', 30);
    
    $options_array = serialize($options_array);
    
    db_query("UPDATE {aggregation_feed} SET aggregation_feed_options = '%s', time_to_live = %d WHERE nid = %d", $options_array, $time_to_live, $row->nid);
  }
  
  $old_feed_data = db_query("SELECT * FROM {aggregation_item}");
 
  while ($row = db_fetch_object($old_feed_data))
  {
    $options_array = array();
    
    $options_array['link_to_original_url'] = 
      ($row->link_to_original_url == 'yes' ? 1 : 0);
    
    $options_array = serialize($options_array);
    
    db_query("UPDATE {aggregation_item} SET aggregation_item_options = '%s' WHERE nid = %d", $options_array, $row->nid);
  }  
  
	switch ($GLOBALS['db_type'])
	{
		case 'mysql':
		case 'mysqli':
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN aggregate_to_moderation_queue");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN enable_comments_on_articles");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN enable_comments_on_images");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN enabled");			
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN link_items_to_original_urls");
			$ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN publish_new_items");
      $ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN sticky_items");
      $ret[] = update_sql("ALTER TABLE {aggregation_feed} DROP COLUMN delete_old_items");
      $ret[] = update_sql("ALTER TABLE {aggregation_item} DROP COLUMN link_to_original_url");
			break;
	}
	
	variable_del('aggregation_item_time_to_live');
  
	return $ret;
}

function aggregation_update_6100()
{
	db_query("ALTER TABLE {aggregation_feed} modify `item_categories` text NOT NULL");
	return array();
}

function aggregation_uninstall()
{
	// Delete all aggregation items
	$result = db_query("SELECT ai.nid FROM {aggregation_item} ai, {node} n WHERE ai.nid = n.nid");
	while ($row = db_fetch_object($result))
		node_delete($row->nid);

	// Delete all aggregation feeds
	$result = db_query("SELECT af.nid FROM {aggregation_feed} af, {node} n WHERE af.nid = n.nid");
	while ($row = db_fetch_object($result))
		node_delete($row->nid);

	// We'll get -1 if this is not set for some reason
	$vocabulary_to_delete = variable_get('aggregation_current_vid', -1);

	if ($vocabulary_to_delete >= 0)
		taxonomy_del_vocabulary($vocabulary_to_delete);

	db_query("DROP TABLE {aggregation_item}");
	db_query("DROP TABLE {aggregation_feed}");
	variable_del('aggregation_current_vid');
	variable_del('aggregation_item_time_to_live');
	variable_del('aggregation_enable_logging');
	variable_del('aggregation_image_to_display');
	variable_del('aggregation_enable_cron');
	variable_del('aggregation_feeds_to_refresh_per_cron');
	variable_del('aggregation_feed_refresh_cooldown');

	node_type_delete('aggregation_feed');
	node_type_delete('aggregation_item');
}

/**
 * Implementation of hook_requirements
 */
function aggregation_requirements($phase)
{
	$requirements = array();

	// Ensure translations don't break at install time
  	$t = get_t();

	// Test PHP version
	$requirements['PHP'] = array(
		'title' => $t('PHP'),
		'value' => ($phase == 'runtime') ? l(phpversion(), 'admin/logs/status/php') :
			phpversion(),
	);

	if (version_compare(phpversion(), '5.0.0') < 0)
	{
		$requirements['PHP']['description'] = $t('This module requires at least PHP %version.', array('%version' => '5.0.0'));
		$requirements['PHP']['severity'] = REQUIREMENT_ERROR;
	}
	
	$requirements['CURL'] = array();
	$requirements['CURL']['title'] = $t('CURL');
	$requirements['CURL']['value'] = $t('INSTALLED');

	// Test for CURL support
	if (!function_exists('curl_init'))
	{
	  $requirements['CURL']['value'] = $t('NOT INSTALLED');
		$requirements['CURL']['description'] = $t('CURL support not present.');
		$requirements['CURL']['severity'] = REQUIREMENT_ERROR;
	}
	
	$requirements['DRUPAL'] = array();
	$requirements['DRUPAL']['title'] = $t('Drupal');
	$requirements['DRUPAL']['value'] = VERSION;

	// Test drupal version support
	if (strpos(VERSION, '5.') !== 0)
	{
		$requirements['DRUPAL']['description'] = $t('Drupal version incompatible with this module.');
		$requirements['DRUPAL']['severity'] = REQUIREMENT_ERROR;
	}

	return $requirements;
}