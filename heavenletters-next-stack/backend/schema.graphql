# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  bio: String
  role: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  heavenletters(where: HeavenletterWhereInput! = {}, orderBy: [HeavenletterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeavenletterWhereUniqueInput): [Heavenletter!]
  heavenlettersCount(where: HeavenletterWhereInput! = {}): Int
  translations(where: TranslationWhereInput! = {}, orderBy: [TranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TranslationWhereUniqueInput): [Translation!]
  translationsCount(where: TranslationWhereInput! = {}): Int
  lastLogin: DateTime
  isActive: String
  createdAt: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  bio: StringFilter
  role: StringNullableFilter
  posts: PostManyRelationFilter
  heavenletters: HeavenletterManyRelationFilter
  translations: TranslationManyRelationFilter
  lastLogin: DateTimeNullableFilter
  isActive: StringNullableFilter
  createdAt: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input HeavenletterManyRelationFilter {
  every: HeavenletterWhereInput
  some: HeavenletterWhereInput
  none: HeavenletterWhereInput
}

input TranslationManyRelationFilter {
  every: TranslationWhereInput
  some: TranslationWhereInput
  none: TranslationWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  bio: OrderDirection
  role: OrderDirection
  lastLogin: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  bio: String
  role: String
  posts: PostRelateToManyForUpdateInput
  heavenletters: HeavenletterRelateToManyForUpdateInput
  translations: TranslationRelateToManyForUpdateInput
  lastLogin: DateTime
  isActive: String
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input HeavenletterRelateToManyForUpdateInput {
  disconnect: [HeavenletterWhereUniqueInput!]
  set: [HeavenletterWhereUniqueInput!]
  create: [HeavenletterCreateInput!]
  connect: [HeavenletterWhereUniqueInput!]
}

input TranslationRelateToManyForUpdateInput {
  disconnect: [TranslationWhereUniqueInput!]
  set: [TranslationWhereUniqueInput!]
  create: [TranslationCreateInput!]
  connect: [TranslationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  bio: String
  role: String
  posts: PostRelateToManyForCreateInput
  heavenletters: HeavenletterRelateToManyForCreateInput
  translations: TranslationRelateToManyForCreateInput
  lastLogin: DateTime
  isActive: String
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input HeavenletterRelateToManyForCreateInput {
  create: [HeavenletterCreateInput!]
  connect: [HeavenletterWhereUniqueInput!]
}

input TranslationRelateToManyForCreateInput {
  create: [TranslationCreateInput!]
  connect: [TranslationWhereUniqueInput!]
}

type Heavenletter {
  id: ID!
  number: Int
  title: String
  body: String
  status: String
  publishedAt: DateTime
  author: User
  translations(where: TranslationWhereInput! = {}, orderBy: [TranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TranslationWhereUniqueInput): [Translation!]
  translationsCount(where: TranslationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input HeavenletterWhereUniqueInput {
  id: ID
  number: Int
}

input HeavenletterWhereInput {
  AND: [HeavenletterWhereInput!]
  OR: [HeavenletterWhereInput!]
  NOT: [HeavenletterWhereInput!]
  id: IDFilter
  number: IntFilter
  title: StringFilter
  body: StringFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
  author: UserWhereInput
  translations: TranslationManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input HeavenletterOrderByInput {
  id: OrderDirection
  number: OrderDirection
  title: OrderDirection
  body: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HeavenletterUpdateInput {
  number: Int
  title: String
  body: String
  status: String
  publishedAt: DateTime
  author: UserRelateToOneForUpdateInput
  translations: TranslationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input HeavenletterUpdateArgs {
  where: HeavenletterWhereUniqueInput!
  data: HeavenletterUpdateInput!
}

input HeavenletterCreateInput {
  number: Int
  title: String
  body: String
  status: String
  publishedAt: DateTime
  author: UserRelateToOneForCreateInput
  translations: TranslationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Translation {
  id: ID!
  languageCode: String
  translatedTitle: String
  translatedBody: String
  translator: User
  status: String
  heavenletter: Heavenletter
  createdAt: DateTime
  updatedAt: DateTime
}

input TranslationWhereUniqueInput {
  id: ID
}

input TranslationWhereInput {
  AND: [TranslationWhereInput!]
  OR: [TranslationWhereInput!]
  NOT: [TranslationWhereInput!]
  id: IDFilter
  languageCode: StringFilter
  translatedTitle: StringFilter
  translatedBody: StringFilter
  translator: UserWhereInput
  status: StringNullableFilter
  heavenletter: HeavenletterWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TranslationOrderByInput {
  id: OrderDirection
  languageCode: OrderDirection
  translatedTitle: OrderDirection
  translatedBody: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TranslationUpdateInput {
  languageCode: String
  translatedTitle: String
  translatedBody: String
  translator: UserRelateToOneForUpdateInput
  status: String
  heavenletter: HeavenletterRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HeavenletterRelateToOneForUpdateInput {
  create: HeavenletterCreateInput
  connect: HeavenletterWhereUniqueInput
  disconnect: Boolean
}

input TranslationUpdateArgs {
  where: TranslationWhereUniqueInput!
  data: TranslationUpdateInput!
}

input TranslationCreateInput {
  languageCode: String
  translatedTitle: String
  translatedBody: String
  translator: UserRelateToOneForCreateInput
  status: String
  heavenletter: HeavenletterRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HeavenletterRelateToOneForCreateInput {
  create: HeavenletterCreateInput
  connect: HeavenletterWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: String
  status: String
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  publishedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  status: StringNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  publishedAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  publishedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: String
  status: String
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  publishedAt: DateTime
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  status: String
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  publishedAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createHeavenletter(data: HeavenletterCreateInput!): Heavenletter
  createHeavenletters(data: [HeavenletterCreateInput!]!): [Heavenletter]
  updateHeavenletter(where: HeavenletterWhereUniqueInput!, data: HeavenletterUpdateInput!): Heavenletter
  updateHeavenletters(data: [HeavenletterUpdateArgs!]!): [Heavenletter]
  deleteHeavenletter(where: HeavenletterWhereUniqueInput!): Heavenletter
  deleteHeavenletters(where: [HeavenletterWhereUniqueInput!]!): [Heavenletter]
  createTranslation(data: TranslationCreateInput!): Translation
  createTranslations(data: [TranslationCreateInput!]!): [Translation]
  updateTranslation(where: TranslationWhereUniqueInput!, data: TranslationUpdateInput!): Translation
  updateTranslations(data: [TranslationUpdateArgs!]!): [Translation]
  deleteTranslation(where: TranslationWhereUniqueInput!): Translation
  deleteTranslations(where: [TranslationWhereUniqueInput!]!): [Translation]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  heavenletter(where: HeavenletterWhereUniqueInput!): Heavenletter
  heavenletters(where: HeavenletterWhereInput! = {}, orderBy: [HeavenletterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeavenletterWhereUniqueInput): [Heavenletter!]
  heavenlettersCount(where: HeavenletterWhereInput! = {}): Int
  translation(where: TranslationWhereUniqueInput!): Translation
  translations(where: TranslationWhereInput! = {}, orderBy: [TranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TranslationWhereUniqueInput): [Translation!]
  translationsCount(where: TranslationWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  heavenlettersByTitle(search: String, title: String): [Heavenletter]
  heavenletterByNumber(number: Int): Heavenletter
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
